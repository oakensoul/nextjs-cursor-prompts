---
description:
globs:
alwaysApply: false
---
# Architecture Documentation Creation

**This prompt generates comprehensive architecture documentation including system design overviews, architectural decision records (ADRs), design patterns, and visual diagrams for complex software systems.**

## 🎯 **ARCHITECTURE DOCUMENTATION OBJECTIVES:**

1. **ANALYZE system architecture** and create comprehensive design documentation
2. **GENERATE architectural decision records** with rationale and consequences
3. **CREATE visual diagrams** showing system relationships and data flow
4. **DOCUMENT design patterns** and architectural principles used
5. **ESTABLISH architecture guidelines** for future development

## 🏗️ **SYSTEM ARCHITECTURE ANALYSIS:**

### **STEP 1: Architecture Discovery and Mapping**

#### **System Component Analysis:**
```bash
# Analyze system components and architecture
echo "🏗️ Analyzing System Architecture..."

# Service and application discovery
echo "## Application Components:"
[ -d "src/app" ] && echo "- Frontend application (Next.js App Router)"
[ -d "src/pages" ] && echo "- Frontend application (Next.js Pages Router)"
[ -d "api" ] || [ -d "src/app/api" ] && echo "- API layer (Next.js API routes)"
[ -d "server" ] && echo "- Backend server application"
[ -d "services" ] && echo "- Service layer architecture"
[ -d "workers" ] && echo "- Background worker processes"

# Database and storage
echo -e "\n## Data Layer:"
[ -f "prisma/schema.prisma" ] && echo "- Primary database with Prisma ORM"
[ -f "drizzle.config.ts" ] && echo "- Database with Drizzle ORM"
grep -q "redis" package.json 2>/dev/null && echo "- Redis for caching/sessions"
grep -q "elasticsearch" package.json 2>/dev/null && echo "- Elasticsearch for search"

# External integrations
echo -e "\n## External Integrations:"
grep -q "stripe" package.json 2>/dev/null && echo "- Stripe payment processing"
grep -q "sendgrid\|nodemailer" package.json 2>/dev/null && echo "- Email service integration"
grep -q "aws-sdk\|@aws-sdk" package.json 2>/dev/null && echo "- AWS services integration"
grep -q "google" package.json 2>/dev/null && echo "- Google services integration"

# Infrastructure
echo -e "\n## Infrastructure:"
[ -f "Dockerfile" ] && echo "- Docker containerization"
[ -f "docker-compose.yml" ] && echo "- Multi-container Docker setup"
[ -f "kubernetes" ] && echo "- Kubernetes orchestration"
[ -d ".github/workflows" ] && echo "- GitHub Actions CI/CD"
[ -f "vercel.json" ] && echo "- Vercel deployment configuration"
```

#### **Architecture Pattern Detection:**
```bash
# Identify architectural patterns in use
cat > "architecture-patterns.md" << 'EOF'
# Architectural Patterns Analysis

## Identified Patterns

### Application Architecture Patterns

#### Model-View-Controller (MVC)
- **Usage**: [Describe if/how MVC is implemented]
- **Components**: Models (data), Views (UI), Controllers (logic)
- **Benefits**: Separation of concerns, testability
- **Implementation**: [Specific framework implementation details]

#### Component-Based Architecture
- **Usage**: React component hierarchy
- **Pattern**: Atomic design principles
- **Structure**: Pages → Layouts → Components → UI Elements
- **Benefits**: Reusability, maintainability, testability

#### Layered Architecture
- **Presentation Layer**: React components and pages
- **Business Logic Layer**: Custom hooks, services, utilities
- **Data Access Layer**: API routes, database queries
- **Data Layer**: Database, external APIs

### API Design Patterns

#### RESTful API
- **Resource-based URLs**: `/api/users`, `/api/posts`
- **HTTP methods**: GET, POST, PUT, DELETE, PATCH
- **Status codes**: Proper HTTP status code usage
- **JSON responses**: Consistent response format

#### Repository Pattern
- **Data abstraction**: Database queries abstracted through repositories
- **Testing**: Easier mocking and testing
- **Flexibility**: Database technology independence

### Data Patterns

#### Active Record vs Data Mapper
- **ORM choice**: [Prisma/Drizzle pattern analysis]
- **Implementation**: How models relate to database
- **Benefits**: [Specific benefits for chosen approach]

#### Command Query Responsibility Segregation (CQRS)
- **Read operations**: Optimized for queries
- **Write operations**: Optimized for commands
- **Implementation**: [If applicable]

### Security Patterns

#### Authentication/Authorization
- **Pattern**: JWT with role-based access control
- **Implementation**: NextAuth.js provider pattern
- **Security**: Token validation, session management

#### Input Validation
- **Pattern**: Schema-based validation with Zod
- **Implementation**: Request validation middleware
- **Security**: SQL injection prevention, XSS protection
EOF
```

## 📋 **ARCHITECTURAL DECISION RECORDS (ADRs):**

### **STEP 2: ADR Creation Framework**

#### **ADR Template and Guidelines:**
```bash
# Create ADR template and directory structure
mkdir -p "docs/architecture/decisions"

cat > "docs/architecture/decisions/ADR-TEMPLATE.md" << 'EOF'
# ADR-XXX: [Title]

**Status**: [Proposed | Accepted | Deprecated | Superseded]
**Date**: YYYY-MM-DD
**Deciders**: [List decision makers]
**Technical Story**: [Link to issue/story if applicable]

## Context

[Describe the context and problem statement that led to this decision]

### Problem Statement
[Clear description of the problem that needs to be solved]

### Constraints
- [List any constraints that influenced the decision]
- [Technical, business, or resource constraints]

## Decision Drivers

- [Driver 1: e.g., Performance requirements]
- [Driver 2: e.g., Developer experience]
- [Driver 3: e.g., Maintainability]
- [Driver 4: e.g., Cost considerations]

## Considered Options

### Option 1: [Name]
**Description**: [Brief description]
**Pros**:
- [Positive aspect 1]
- [Positive aspect 2]

**Cons**:
- [Negative aspect 1]
- [Negative aspect 2]

**Cost/Effort**: [Implementation cost/effort]

### Option 2: [Name]
**Description**: [Brief description]
**Pros**:
- [Positive aspect 1]
- [Positive aspect 2]

**Cons**:
- [Negative aspect 1]
- [Negative aspect 2]

**Cost/Effort**: [Implementation cost/effort]

## Decision Outcome

**Chosen option**: "[Option X]"

### Rationale
[Explain why this option was chosen over the others]

### Implementation Plan
1. [Step 1]
2. [Step 2]
3. [Step 3]

## Consequences

### Positive Consequences
- [Benefit 1]
- [Benefit 2]

### Negative Consequences
- [Risk/Drawback 1]
- [Risk/Drawback 2]

### Mitigation Strategies
- [How to address negative consequences]

## Follow-up Actions
- [ ] [Action item 1]
- [ ] [Action item 2]
- [ ] [Review date for this decision]

## Related Decisions
- [Links to related ADRs]

---
**ADR Number**: XXX
**Last Updated**: YYYY-MM-DD
**Next Review**: YYYY-MM-DD
EOF

# Create initial ADRs for key architectural decisions
cat > "docs/architecture/decisions/ADR-001-database-technology.md" << 'EOF'
# ADR-001: Database Technology Selection

**Status**: Accepted
**Date**: 2025-12-07
**Deciders**: Engineering Team
**Technical Story**: Initial database selection for the application

## Context

The application requires a robust database solution that can handle:
- User authentication and profile management
- Content management with relationships
- ACID compliance for data integrity
- Scalability for future growth
- Good developer experience with TypeScript

## Decision Drivers

- Type safety and TypeScript integration
- ACID compliance for data integrity
- Performance for read-heavy workloads
- Developer productivity and experience
- Ecosystem maturity and community support
- Deployment and hosting options

## Considered Options

### Option 1: PostgreSQL with Prisma ORM
**Description**: Relational database with modern TypeScript ORM
**Pros**:
- Excellent TypeScript integration
- ACID compliance
- Rich feature set (JSON support, full-text search)
- Strong ecosystem and community
- Great tooling (Prisma Studio, migrations)

**Cons**:
- Learning curve for team members new to SQL
- Requires more careful query optimization

**Cost/Effort**: Medium setup, low maintenance

### Option 2: MongoDB with Mongoose
**Description**: Document database with JavaScript ODM
**Pros**:
- Flexible schema
- JSON-native storage
- Horizontal scaling capabilities
- Familiar for JavaScript developers

**Cons**:
- Eventual consistency challenges
- Less mature TypeScript support
- Complex queries can be difficult

**Cost/Effort**: Low setup, medium maintenance

### Option 3: SQLite for Development, PostgreSQL for Production
**Description**: Different databases for different environments
**Pros**:
- Simple local development setup
- Production-ready PostgreSQL
- Cost-effective for small projects

**Cons**:
- Environment inconsistencies
- Complex deployment pipeline
- Feature differences between databases

**Cost/Effort**: Low setup, high maintenance

## Decision Outcome

**Chosen option**: "PostgreSQL with Prisma ORM"

### Rationale
PostgreSQL with Prisma provides the best balance of:
- Type safety crucial for our TypeScript-first approach
- ACID compliance for data integrity requirements
- Rich feature set supporting complex queries and relationships
- Excellent developer experience with Prisma tooling
- Strong community and ecosystem support

### Implementation Plan
1. Set up PostgreSQL database (local and production)
2. Configure Prisma with initial schema
3. Implement database migrations workflow
4. Set up Prisma Studio for database management
5. Create seeding scripts for development data

## Consequences

### Positive Consequences
- Strong type safety throughout the application
- Reliable ACID transactions for data integrity
- Excellent development experience with Prisma tooling
- Clear migration path for schema changes
- Good performance characteristics for our use case

### Negative Consequences
- Learning curve for team members new to SQL/Prisma
- More complex than simple key-value storage
- Requires careful query optimization for performance

### Mitigation Strategies
- Provide SQL/Prisma training for team members
- Implement query monitoring and optimization guidelines
- Use Prisma's query analysis tools for performance tuning

## Follow-up Actions
- [ ] Set up database monitoring and alerting
- [ ] Create database backup and recovery procedures
- [ ] Establish query performance guidelines
- [ ] Review decision in 6 months based on experience

## Related Decisions
- ADR-002: ORM vs Query Builder selection
- ADR-003: Database hosting strategy

---
**ADR Number**: 001
**Last Updated**: 2025-12-07
**Next Review**: 2025-06-07
EOF

echo "📋 ADR framework and initial decisions created"
```

### **STEP 3: System Design Documentation**

#### **High-Level Architecture Documentation:**
```bash
# Create comprehensive system design documentation
cat > "docs/architecture/SYSTEM_DESIGN.md" << 'EOF'
# System Design Documentation

This document provides a comprehensive overview of the system architecture, components, and design decisions.

## System Overview

### Mission Statement
[Brief description of what the system does and its primary purpose]

### Key Requirements
- **Functional**: [List key functional requirements]
- **Non-Functional**: [Performance, scalability, reliability requirements]
- **Quality Attributes**: [Security, maintainability, usability]

## Architecture Overview

### High-Level Architecture Diagram

```
┌─────────────────────────────────────────────────────────┐
│                    Client Layer                         │
├─────────────────────────────────────────────────────────┤
│  Web Browser  │  Mobile App  │  API Clients  │  CLI     │
└─────────────┬───────────────┬─────────────────┬─────────┘
              │               │                 │
              ▼               ▼                 ▼
┌─────────────────────────────────────────────────────────┐
│                 Application Layer                       │
├─────────────────────────────────────────────────────────┤
│            Next.js Frontend & API Routes                │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │
│  │   Pages/    │  │ Components  │  │ API Routes  │     │
│  │  App Router │  │             │  │             │     │
│  └─────────────┘  └─────────────┘  └─────────────┘     │
└─────────────┬───────────────┬─────────────────┬─────────┘
              │               │                 │
              ▼               ▼                 ▼
┌─────────────────────────────────────────────────────────┐
│                  Service Layer                          │
├─────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │
│  │    Auth     │  │   Business  │  │ Integration │     │
│  │   Service   │  │   Logic     │  │  Services   │     │
│  └─────────────┘  └─────────────┘  └─────────────┘     │
└─────────────┬───────────────┬─────────────────┬─────────┘
              │               │                 │
              ▼               ▼                 ▼
┌─────────────────────────────────────────────────────────┐
│                   Data Layer                            │
├─────────────────────────────────────────────────────────┤
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │
│  │ PostgreSQL  │  │    Redis    │  │  External   │     │
│  │  Database   │  │   Cache     │  │    APIs     │     │
│  └─────────────┘  └─────────────┘  └─────────────┘     │
└─────────────────────────────────────────────────────────┘
```

### Component Responsibilities

#### Client Layer
- **Web Browser**: Primary user interface for desktop/mobile web
- **Mobile App**: Native mobile applications (if applicable)
- **API Clients**: Third-party integrations and external consumers
- **CLI Tools**: Administrative and development tools

#### Application Layer
- **Frontend Components**: React-based user interface components
- **API Routes**: RESTful API endpoints for data operations
- **App Router**: Next.js routing and page management
- **Middleware**: Authentication, validation, and request processing

#### Service Layer
- **Authentication Service**: User authentication and authorization
- **Business Logic**: Core application functionality and rules
- **Integration Services**: External API communication and data sync

#### Data Layer
- **PostgreSQL**: Primary relational database for persistent data
- **Redis Cache**: Session storage and performance optimization
- **External APIs**: Third-party services and data sources

## Detailed Component Design

### Frontend Architecture

#### Component Hierarchy
```
App
├── Layout Components
│   ├── Header (Navigation, User Menu)
│   ├── Sidebar (Main Navigation)
│   └── Footer (Links, Legal)
├── Page Components
│   ├── Dashboard (Overview, Quick Actions)
│   ├── User Profile (Settings, Preferences)
│   └── Content Management (CRUD Operations)
├── Feature Components
│   ├── Authentication (Login, Signup, Reset)
│   ├── Forms (Input, Validation, Submission)
│   └── Data Display (Tables, Charts, Lists)
└── UI Components
    ├── Base Elements (Button, Input, Modal)
    ├── Composite (Card, Panel, Toolbar)
    └── Layout (Grid, Stack, Container)
```

#### State Management Strategy
- **Server State**: React Query for API data caching and synchronization
- **Global State**: React Context for user session and app-wide settings
- **Local State**: useState for component-specific state
- **Form State**: React Hook Form for form handling and validation
- **URL State**: Next.js router for navigation and query parameters

### Backend Architecture

#### API Design
```
/api/
├── auth/
│   ├── login (POST)
│   ├── logout (POST)
│   ├── register (POST)
│   └── refresh (POST)
├── users/
│   ├── profile (GET, PATCH)
│   ├── settings (GET, PUT)
│   └── [id]/ (GET, PUT, DELETE)
├── content/
│   ├── posts/ (GET, POST)
│   ├── posts/[id] (GET, PUT, DELETE)
│   └── categories/ (GET, POST)
└── admin/
    ├── users/ (GET, POST, PUT, DELETE)
    ├── settings/ (GET, PUT)
    └── analytics/ (GET)
```

#### Database Schema Design
```sql
-- Core user management
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255),
    role user_role DEFAULT 'user',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Content management
CREATE TABLE posts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    content TEXT,
    status post_status DEFAULT 'draft',
    author_id UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Relationship management
CREATE TABLE user_posts (
    user_id UUID REFERENCES users(id),
    post_id UUID REFERENCES posts(id),
    role collaboration_role,
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (user_id, post_id)
);
```

## Cross-Cutting Concerns

### Security Architecture
- **Authentication**: JWT tokens with NextAuth.js
- **Authorization**: Role-based access control (RBAC)
- **Input Validation**: Zod schema validation on all inputs
- **SQL Injection**: Prevented through Prisma ORM
- **XSS Protection**: Content Security Policy and input sanitization
- **CSRF Protection**: Built-in Next.js CSRF protection

### Performance Strategy
- **Frontend Optimization**: Code splitting, lazy loading, image optimization
- **Caching Strategy**: Browser cache, CDN, Redis for sessions
- **Database Optimization**: Proper indexing, query optimization
- **Bundle Optimization**: Tree shaking, compression, analysis

### Monitoring and Observability
- **Error Tracking**: Centralized error logging and alerting
- **Performance Monitoring**: Application performance metrics
- **Health Checks**: System health and availability monitoring
- **Analytics**: User behavior and feature usage tracking

## Data Flow and Integration

### Request Flow
1. **Client Request**: User interaction triggers request
2. **Routing**: Next.js router handles URL routing
3. **Middleware**: Authentication and validation checks
4. **API Handler**: Business logic processing
5. **Database Query**: Data retrieval/modification via Prisma
6. **Response**: Formatted JSON response returned
7. **Client Update**: UI updates based on response

### Authentication Flow
1. User submits credentials via login form
2. API validates credentials against database
3. JWT token generated and returned to client
4. Client stores token (secure HTTP-only cookie)
5. Subsequent requests include token in headers
6. Middleware validates token and extracts user context
7. Protected routes/APIs check user permissions

### Data Synchronization
- **Real-time Updates**: WebSocket connections for live data
- **Optimistic Updates**: UI updates before server confirmation
- **Conflict Resolution**: Last-write-wins with user notification
- **Offline Support**: Service worker for offline functionality

## Deployment Architecture

### Environment Strategy
- **Development**: Local development with hot reloading
- **Staging**: Production-like environment for testing
- **Production**: Optimized build with performance monitoring

### Infrastructure Components
```
Internet
    ↓
CDN (Static Assets)
    ↓
Load Balancer
    ↓
Application Servers (Next.js)
    ↓
Database (PostgreSQL)
```

### CI/CD Pipeline
1. **Code Push**: Developer pushes to repository
2. **Automated Tests**: Unit, integration, and E2E tests
3. **Code Quality**: Linting, formatting, security scanning
4. **Build**: Production build and optimization
5. **Deploy to Staging**: Automatic staging deployment
6. **Manual Testing**: QA testing in staging environment
7. **Deploy to Production**: Manual production deployment
8. **Health Checks**: Post-deployment monitoring

## Scalability Considerations

### Horizontal Scaling
- **Application Layer**: Multiple Next.js instances behind load balancer
- **Database Layer**: Read replicas for query scaling
- **Cache Layer**: Redis cluster for distributed caching
- **File Storage**: CDN for static asset delivery

### Vertical Scaling
- **Database**: Increased CPU/memory for complex queries
- **Application**: Higher-capacity instances for CPU-intensive tasks
- **Cache**: More memory for larger cache sizes

### Performance Bottlenecks
- **Database Queries**: Monitor and optimize slow queries
- **API Response Times**: Cache frequently accessed data
- **Frontend Bundle Size**: Code splitting and lazy loading
- **Memory Usage**: Profile and optimize memory consumption

## Future Considerations

### Technology Evolution
- **Framework Updates**: Regular Next.js and React updates
- **Database Scaling**: Consider sharding or NoSQL for specific use cases
- **Microservices**: Potential service extraction as system grows
- **Edge Computing**: Consider edge deployment for global performance

### Feature Expansion
- **Mobile Applications**: Native iOS/Android apps
- **Advanced Analytics**: Business intelligence and reporting
- **Machine Learning**: AI-powered features and recommendations
- **Integrations**: Additional third-party service integrations

---
**Document Version**: 1.0
**Last Updated**: 2025-12-07
**Next Review**: 2025-03-07
EOF

echo "🏗️ Comprehensive system design documentation created"
echo ""
echo "🎉 ARCHITECTURE DOCUMENTATION CREATION COMPLETE!"
echo ""
echo "📁 Generated Architecture Documentation:"
echo "   📋 Architecture Patterns: architecture-patterns.md"
echo "   📝 ADR Template: docs/architecture/decisions/ADR-TEMPLATE.md"
echo "   📋 Initial ADR: docs/architecture/decisions/ADR-001-database-technology.md"
echo "   🏗️ System Design: docs/architecture/SYSTEM_DESIGN.md"
echo ""
echo "🚀 Next Steps:"
echo "   1. Create additional ADRs for major architectural decisions"
echo "   2. Update system diagrams with actual architecture"
echo "   3. Document specific design patterns used in the project"
echo "   4. Set up regular architecture review processes"
echo ""
```

## 💡 **ARCHITECTURE DOCUMENTATION EXAMPLES:**

### **Example 1: Microservices Architecture**
```
Document microservices system architecture

Following .cursor/prompts/documentation/documentation-create-architecture.mdc:
- Focus on service boundaries and communication patterns
- Include API gateway and service discovery documentation
- Create ADRs for service decomposition decisions
- Document data consistency and transaction patterns
```

### **Example 2: Event-Driven Architecture**
```
Create architecture docs for event-driven system

Following .cursor/prompts/documentation/documentation-create-architecture.mdc:
- Document event flow and messaging patterns
- Include event sourcing and CQRS implementation details
- Create ADRs for event store and message broker selection
- Document consistency and eventual consistency patterns
```

### **Example 3: Serverless Architecture**
```
Generate serverless architecture documentation

Following .cursor/prompts/documentation/documentation-create-architecture.mdc:
- Document function boundaries and cold start considerations
- Include state management and data persistence patterns
- Create ADRs for cloud provider and service selection
- Document scaling and cost optimization strategies
```

---

**This architecture documentation creation prompt ensures comprehensive system design documentation with clear decision rationale, visual representations, and maintainable architectural records.**
