---
description:
globs:
alwaysApply: false
---
# Hotfix Commit and Pull Request Management

**This prompt provides specialized commit process for hotfixes with automated documentation updates, code review integration, and pull request management.**

## 🎯 **HOTFIX COMMIT OBJECTIVES:**

1. **COMMIT hotfix changes** with comprehensive documentation and traceability
2. **UPDATE pull request** automatically with implementation details
3. **GENERATE automated code review** summary and recommendations
4. **VALIDATE final deployment readiness** before pushing to remote
5. **COORDINATE team communication** and next steps for deployment

## 📋 **PRE-COMMIT VALIDATION:**

### **STEP 1: Final Hotfix Validation**

#### **Branch and Environment Verification:**
```bash
# Verify we're on the correct hotfix branch
CURRENT_BRANCH=$(git branch --show-current)
if [[ ! "$CURRENT_BRANCH" =~ ^hotfix/ ]]; then
    echo "❌ ERROR: Not on a hotfix branch. Current: $CURRENT_BRANCH"
    exit 1
fi

echo "✅ Validated hotfix branch: $CURRENT_BRANCH"

# Extract issue information
ISSUE_ID=$(echo $CURRENT_BRANCH | cut -d'-' -f2)
DESCRIPTION=$(echo $CURRENT_BRANCH | cut -d'-' -f3- | tr '-' ' ')

echo "📋 Issue ID: $ISSUE_ID"
echo "📝 Description: $DESCRIPTION"

# Check for required documentation
HOTFIX_DOC=".hotfix_docs/HOTFIX_${ISSUE_ID}.md"
if [ ! -f "$HOTFIX_DOC" ]; then
    echo "❌ ERROR: Hotfix documentation missing: $HOTFIX_DOC"
    echo "Run git-create-hotfix.mdc first to set up proper documentation"
    exit 1
fi

# Check for review completion
REVIEW_REPORT=".hotfix_docs/REVIEW_REPORT.md"
if [ ! -f "$REVIEW_REPORT" ]; then
    echo "⚠️  WARNING: Review report not found. Run git-review-hotfix.mdc first"
    echo "Proceeding with commit, but review is recommended"
fi
```

#### **Final Quality Gates:**
```bash
# Run final test suite
echo "🧪 Running final test validation..."
npm run test
if [ $? -ne 0 ]; then
    echo "❌ ERROR: Tests failing. Cannot commit hotfix with failing tests."
    exit 1
fi

# Check build
echo "🔨 Verifying build..."
npm run build
if [ $? -ne 0 ]; then
    echo "❌ ERROR: Build failing. Cannot commit hotfix with build errors."
    exit 1
fi

# Verify no staged changes conflict
if git diff --cached --exit-code > /dev/null; then
    echo "ℹ️  No staged changes detected. Will stage all modified files."
    git add .
fi

echo "✅ Pre-commit validation complete"
```

### **STEP 2: Automated Code Review Generation**

#### **AI-Powered Code Review:**
```bash
# Generate automated code review summary
echo "🤖 Generating automated code review..."

CHANGED_FILES=$(git diff --cached --name-only)
TOTAL_CHANGES=$(git diff --cached --shortstat)

cat > ".hotfix_docs/AUTOMATED_REVIEW.md" << EOF
# Automated Code Review: $CURRENT_BRANCH

**Generated**: $(date)
**Issue ID**: $ISSUE_ID
**Branch**: $CURRENT_BRANCH

## 📊 **Change Summary**
$TOTAL_CHANGES

### Files Modified:
EOF

# Analyze each changed file
for file in $CHANGED_FILES; do
    echo "### $file" >> ".hotfix_docs/AUTOMATED_REVIEW.md"
    
    # Get change statistics for this file
    FILE_STATS=$(git diff --cached --shortstat "$file" 2>/dev/null || echo "Binary file")
    echo "**Changes**: $FILE_STATS" >> ".hotfix_docs/AUTOMATED_REVIEW.md"
    
    # Extract change context
    echo "" >> ".hotfix_docs/AUTOMATED_REVIEW.md"
    echo "\`\`\`diff" >> ".hotfix_docs/AUTOMATED_REVIEW.md"
    git diff --cached "$file" | head -20 >> ".hotfix_docs/AUTOMATED_REVIEW.md"
    echo "\`\`\`" >> ".hotfix_docs/AUTOMATED_REVIEW.md"
    echo "" >> ".hotfix_docs/AUTOMATED_REVIEW.md"
done

# Add code quality observations
cat >> ".hotfix_docs/AUTOMATED_REVIEW.md" << 'EOF'

## 🔍 **Code Quality Observations**

### Positive Patterns Detected:
- [ ] Minimal scope changes (hotfix principle followed)
- [ ] Existing code patterns preserved
- [ ] Appropriate error handling
- [ ] Clear variable naming
- [ ] Proper TypeScript types (if applicable)

### Areas for Attention:
- [ ] Large change sets (>100 lines changed)
- [ ] Complex logic additions
- [ ] New dependencies introduced
- [ ] Configuration changes
- [ ] Database schema modifications

### Security Considerations:
- [ ] Input validation present
- [ ] Output sanitization implemented
- [ ] No hardcoded secrets
- [ ] Access control maintained
- [ ] Error messages don't leak information

## 🎯 **Hotfix-Specific Review**

### Scope Compliance:
- [ ] Changes limited to critical issue resolution
- [ ] No feature additions or enhancements
- [ ] No refactoring or cleanup
- [ ] Minimal configuration changes

### Risk Assessment:
- **Implementation Risk**: [LOW/MEDIUM/HIGH]
- **Deployment Risk**: [LOW/MEDIUM/HIGH]
- **Rollback Complexity**: [SIMPLE/MODERATE/COMPLEX]

---
**Review Type**: Automated Analysis
**Generated By**: git-commit-hotfix.mdc
EOF

echo "📄 Automated review generated: .hotfix_docs/AUTOMATED_REVIEW.md"
```

## 📝 **COMMIT MESSAGE GENERATION:**

### **STEP 3: Comprehensive Commit Message Creation**

#### **Automated Commit Message Template:**
```bash
# Generate comprehensive commit message
echo "📝 Generating hotfix commit message..."

# Extract commit details
ROOT_CAUSE="[TO_BE_UPDATED]"
FIX_APPROACH="[TO_BE_UPDATED]"
TESTING_STATUS="[TO_BE_UPDATED]"

# Check if hotfix doc has been updated with details
if grep -q "To be determined\|To be identified\|To be updated" "$HOTFIX_DOC"; then
    echo "⚠️  Hotfix documentation contains placeholder text. Please update before committing."
    echo "Edit: $HOTFIX_DOC"
    read -p "Continue with commit anyway? (y/N): " CONTINUE_COMMIT
    if [[ ! "$CONTINUE_COMMIT" =~ ^[Yy]$ ]]; then
        echo "❌ Commit cancelled. Update documentation first."
        exit 1
    fi
else
    # Extract details from updated documentation
    ROOT_CAUSE=$(grep -A 3 "Primary Cause:" "$HOTFIX_DOC" | tail -1 | sed 's/^- //' || echo "[Document root cause]")
    FIX_APPROACH=$(grep -A 3 "Approach:" "$HOTFIX_DOC" | tail -1 | sed 's/^- //' || echo "[Document fix approach]")
fi

# Create comprehensive commit message
COMMIT_MSG="hotfix: $ISSUE_ID - $DESCRIPTION

## 🚨 Critical Production Fix

### Issue Summary:
- **Severity**: [CRITICAL/HIGH/MEDIUM]
- **Impact**: [Production system impact]
- **Root Cause**: $ROOT_CAUSE

### Resolution:
- **Fix Approach**: $FIX_APPROACH
- **Scope**: Minimal changes to resolve critical issue
- **Risk Level**: [LOW/MEDIUM/HIGH]

### Changes Made:
$(git diff --cached --name-only | sed 's/^/- /')

### Testing Completed:
- [x] Unit tests pass
- [x] Integration tests pass
- [x] Manual regression testing
- [x] Issue reproduction resolved
- [x] No performance degradation

### Deployment Notes:
- **Target Environment**: Production
- **Rollback Plan**: Revert commit + redeploy previous version
- **Monitoring**: Post-deployment error rate and performance monitoring
- **Timeline**: Deploy ASAP after approval

### Review Status:
- [x] Code review completed
- [x] Security implications assessed
- [x] Performance impact validated
- [x] Documentation updated

### Related Issues:
- **Issue ID**: $ISSUE_ID
- **Hotfix Branch**: $CURRENT_BRANCH
- **Target Commit**: $(git log --oneline -1 main | cut -d' ' -f1)

Fixes: $ISSUE_ID
Reviewed-by: [Reviewer Name]
Tested-by: $(git config user.name)
"

echo "📋 Commit message prepared"
```

### **STEP 4: Interactive Commit Refinement**

#### **Commit Message Review and Enhancement:**
```bash
# Save commit message to temporary file for editing
TEMP_COMMIT_FILE=".hotfix_docs/commit_message.tmp"
echo "$COMMIT_MSG" > "$TEMP_COMMIT_FILE"

echo "📝 Commit message saved to: $TEMP_COMMIT_FILE"
echo ""
echo "🔍 Please review and update the commit message:"
echo "   - Update severity, impact, and root cause"
echo "   - Add specific deployment notes"
echo "   - Include reviewer information"
echo ""

# Option to edit commit message
read -p "Edit commit message now? (Y/n): " EDIT_MSG
if [[ ! "$EDIT_MSG" =~ ^[Nn]$ ]]; then
    ${EDITOR:-nano} "$TEMP_COMMIT_FILE"
    echo "✅ Commit message updated"
fi

# Read the finalized commit message
FINAL_COMMIT_MSG=$(cat "$TEMP_COMMIT_FILE")
```

## 🔄 **DOCUMENTATION UPDATES:**

### **STEP 5: Automated Documentation Updates**

#### **Hotfix Documentation Final Update:**
```bash
# Update hotfix tracking document with commit information
echo "📚 Updating hotfix documentation..."

# Add commit information to hotfix document
cat >> "$HOTFIX_DOC" << EOF

## 💾 **Commit Information**

### Final Commit Details:
- **Commit Message**: [See git log for full message]
- **Commit Hash**: [Will be updated after commit]
- **Committed By**: $(git config user.name) <$(git config user.email)>
- **Commit Date**: $(date)

### Files Modified:
$(git diff --cached --name-only | sed 's/^/- /')

### Code Review Summary:
- **Automated Review**: .hotfix_docs/AUTOMATED_REVIEW.md
- **Manual Review**: .hotfix_docs/REVIEW_REPORT.md
- **Final Validation**: All quality gates passed

### Next Steps:
1. Push to remote repository
2. Update pull request with commit details
3. Coordinate deployment
4. Monitor post-deployment metrics
5. Schedule post-incident review

---
**Status Updated**: $(date)
**Ready for**: Deployment
EOF

echo "✅ Hotfix documentation updated"
```

#### **Pull Request Template Update:**
```bash
# Update pull request template with implementation details
echo "🔀 Updating pull request template..."

PR_TEMPLATE=".hotfix_docs/PR_TEMPLATE.md"

# Create updated PR description
cat > "${PR_TEMPLATE}.updated" << EOF
## 🚨 Hotfix: $ISSUE_ID - $DESCRIPTION

### Issue Summary
**Severity**: [Update with actual severity]
**Impact**: [Update with specific impact details]
**Root Cause**: $ROOT_CAUSE

### Changes Made
$(git diff --cached --name-only | sed 's/^/- ✅ /')

### Fix Implementation
$FIX_APPROACH

### Testing Completed
- [x] Unit tests pass ($(git rev-list --count HEAD ^main) commits tested)
- [x] Integration tests pass
- [x] Manual regression testing completed
- [x] Issue reproduction resolved
- [x] Performance impact assessed (no degradation)
- [x] Security implications reviewed

### Code Review
- [x] Automated code analysis completed
- [x] Manual code review by [Reviewer Name]
- [x] Security review completed
- [x] Performance review completed

### Deployment Plan
- **Target Environment**: Production
- **Deployment Method**: [Standard/Emergency deployment]
- **Rollback Strategy**: Revert commit $(git rev-parse --short HEAD) + redeploy
- **Monitoring Plan**: Error rate, response time, and business metrics monitoring

### Documentation
- [x] Root cause documented
- [x] Fix approach documented
- [x] Testing results documented
- [x] Deployment procedures documented
- [x] Rollback procedures documented

### Approvals Required
- [ ] Senior developer code review
- [ ] Security team approval (if security-related)
- [ ] Business stakeholder approval
- [ ] DevOps deployment approval

---
**Branch**: $CURRENT_BRANCH
**Issue**: $ISSUE_ID
**Commits**: $(git rev-list --count HEAD ^main)
**Files Changed**: $(git diff --cached --name-only | wc -l)
**Lines Changed**: $(git diff --cached --shortstat)

**Ready for**: Immediate deployment upon approval
**Created**: $(date)
**Last Updated**: $(date)
EOF

mv "${PR_TEMPLATE}.updated" "$PR_TEMPLATE"
echo "✅ Pull request template updated"
```

## 💾 **COMMIT EXECUTION:**

### **STEP 6: Final Commit and Push**

#### **Commit Execution with Verification:**
```bash
# Execute the commit
echo "💾 Committing hotfix changes..."

# Commit with the prepared message
git commit -F "$TEMP_COMMIT_FILE"
COMMIT_RESULT=$?

if [ $COMMIT_RESULT -eq 0 ]; then
    COMMIT_HASH=$(git rev-parse HEAD)
    echo "✅ Commit successful: $COMMIT_HASH"
    
    # Update documentation with actual commit hash
    sed -i "s/\[Will be updated after commit\]/$COMMIT_HASH/g" "$HOTFIX_DOC"
    
    # Clean up temporary files
    rm -f "$TEMP_COMMIT_FILE"
    
else
    echo "❌ ERROR: Commit failed with exit code $COMMIT_RESULT"
    exit 1
fi
```

#### **Push to Remote with PR Update:**
```bash
# Push to remote repository
echo "🚀 Pushing hotfix to remote repository..."

git push origin "$CURRENT_BRANCH"
PUSH_RESULT=$?

if [ $PUSH_RESULT -eq 0 ]; then
    echo "✅ Push successful"
    
    # Update pull request if GitHub CLI is available
    if command -v gh &> /dev/null; then
        echo "🔄 Updating pull request..."
        
        # Update PR description
        gh pr edit --body-file "$PR_TEMPLATE" 2>/dev/null || echo "⚠️  Could not auto-update PR. Please update manually."
        
        # Add relevant labels
        gh pr edit --add-label "ready-for-review,hotfix,priority:critical" 2>/dev/null || echo "⚠️  Could not update PR labels"
        
        # Request reviews if configured
        # gh pr edit --add-reviewer "team-leads,security-team" 2>/dev/null || echo "⚠️  Could not request reviews automatically"
        
        PR_URL=$(gh pr view --json url --jq .url 2>/dev/null || echo "Unknown")
        echo "🔗 PR URL: $PR_URL"
    else
        echo "⚠️  GitHub CLI not available. Please update PR manually with:"
        echo "   - Updated description from: $PR_TEMPLATE"
        echo "   - Add labels: ready-for-review, hotfix, priority:critical"
        echo "   - Request appropriate reviews"
    fi
    
else
    echo "❌ ERROR: Push failed with exit code $PUSH_RESULT"
    echo "Commit was successful but push failed. Try:"
    echo "  git push origin $CURRENT_BRANCH"
    exit 1
fi
```

## 📊 **COMPLETION REPORT:**

### **STEP 7: Generate Final Status Report**

#### **Comprehensive Completion Report:**
```bash
# Generate final completion report
echo "📋 Generating hotfix completion report..."

cat > ".hotfix_docs/COMMIT_COMPLETION.md" << EOF
# Hotfix Commit Completion Report

**Completion Date**: $(date)
**Hotfix Branch**: $CURRENT_BRANCH
**Issue ID**: $ISSUE_ID
**Commit Hash**: $COMMIT_HASH

## ✅ **Completion Status**

### Commit Details:
- **Status**: ✅ COMPLETED
- **Commit Hash**: $COMMIT_HASH
- **Push Status**: ✅ PUSHED TO REMOTE
- **PR Status**: 🔄 READY FOR REVIEW

### Documentation Status:
- [x] Hotfix tracking document updated
- [x] Pull request template updated
- [x] Automated code review generated
- [x] Commit message comprehensive
- [x] All documentation synchronized

### Quality Validation:
- [x] All tests passing
- [x] Build successful
- [x] Code review completed
- [x] Security assessment completed
- [x] Performance validation completed

## 🚀 **Next Steps**

### Immediate Actions:
1. **PR Review**: Request and complete code reviews
2. **Stakeholder Approval**: Get business stakeholder sign-off
3. **Deployment Coordination**: Schedule deployment window
4. **Monitoring Setup**: Prepare post-deployment monitoring

### Deployment Process:
1. **Final PR Approval**: Ensure all required approvals
2. **Pre-deployment Checklist**: Validate deployment readiness
3. **Deploy to Production**: Execute deployment
4. **Post-deployment Monitoring**: Monitor for 2-4 hours
5. **Status Communication**: Update stakeholders

### Post-Deployment:
1. **Monitor Metrics**: Error rates, performance, business metrics
2. **Validate Fix**: Confirm issue resolution in production
3. **Documentation**: Update runbooks and knowledge base
4. **Post-Incident Review**: Schedule team retrospective

## 📞 **Key Information**

### Repository:
- **Branch**: $CURRENT_BRANCH
- **Commit**: $COMMIT_HASH
- **PR**: [Update with PR number/URL]

### Contacts:
- **Hotfix Lead**: $(git config user.name) <$(git config user.email)>
- **Code Reviewer**: [To be assigned]
- **DevOps Contact**: [Deployment coordinator]
- **Business Stakeholder**: [Sign-off authority]

### Emergency Procedures:
- **Rollback Command**: \`git revert $COMMIT_HASH && git push origin main\`
- **Emergency Contact**: [On-call engineer contact]
- **Escalation Path**: [Management escalation]

## 📈 **Metrics**

### Development:
- **Total Development Time**: [Calculate from branch creation]
- **Commits**: $(git rev-list --count HEAD ^main)
- **Files Changed**: $(git diff main..HEAD --name-only | wc -l)
- **Lines Changed**: $(git diff main..HEAD --shortstat)

### Testing:
- **Test Categories**: Unit, Integration, E2E, Manual
- **Test Coverage**: [Current coverage percentage]
- **Test Duration**: [Time spent on testing]

---
**Status**: READY FOR DEPLOYMENT
**Generated By**: git-commit-hotfix.mdc
**Completion Time**: $(date)
EOF

echo "📄 Completion report generated: .hotfix_docs/COMMIT_COMPLETION.md"
echo ""
echo "🎉 HOTFIX COMMIT COMPLETE!"
echo ""
echo "📋 Summary:"
echo "   Branch: $CURRENT_BRANCH"
echo "   Commit: $COMMIT_HASH"
echo "   Status: Ready for deployment"
echo ""
echo "🚀 Next Steps:"
echo "   1. Complete PR review process"
echo "   2. Get stakeholder approvals"
echo "   3. Coordinate deployment"
echo "   4. Monitor post-deployment"
echo ""
echo "📚 Documentation:"
echo "   - Main tracking: $HOTFIX_DOC"
echo "   - PR template: $PR_TEMPLATE"
echo "   - Automated review: .hotfix_docs/AUTOMATED_REVIEW.md"
echo "   - Completion report: .hotfix_docs/COMMIT_COMPLETION.md"
echo ""
```

## 💡 **COMMIT EXAMPLES:**

### **Example 1: Payment Gateway Hotfix Commit**
```
Commit payment timeout hotfix with comprehensive documentation

Following .cursor/prompts/git/git-commit-hotfix.mdc:
- Update timeout handling for Stripe webhook processing
- Include automated code review and testing validation
- Generate PR updates with deployment instructions
- Document rollback procedures and monitoring plan
```

### **Example 2: Security Hotfix Commit**
```
Commit XSS vulnerability fix with security review

Following .cursor/prompts/git/git-commit-hotfix.mdc:
- Implement input sanitization for user profile fields
- Include security team review requirements in PR
- Generate security-focused testing documentation
- Coordinate immediate deployment procedures
```

### **Example 3: Database Performance Hotfix Commit**
```
Commit database connection pool fix with performance validation

Following .cursor/prompts/git/git-commit-hotfix.mdc:
- Increase connection pool limits and add monitoring
- Document performance impact and testing results
- Include database-specific rollback procedures
- Coordinate with DBA team for deployment validation
```

---

**This hotfix commit process ensures comprehensive documentation, automated code review, and proper pull request management for critical production fixes.**
