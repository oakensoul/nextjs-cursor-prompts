---
description:
globs:
alwaysApply: false
---
# Security Review and Vulnerability Assessment Guide

**This prompt provides comprehensive security auditing for code, APIs, and application components, identifying vulnerabilities and ensuring security best practices are implemented.**

## ðŸŽ¯ **SECURITY REVIEW OBJECTIVES:**

1. **IDENTIFY security vulnerabilities** across all application layers
2. **ASSESS implementation** of security best practices and standards
3. **EVALUATE data protection** and privacy compliance measures
4. **VALIDATE authentication and authorization** mechanisms
5. **PROVIDE actionable remediation** recommendations with severity ratings

## ðŸ”’ **COMPREHENSIVE SECURITY ASSESSMENT:**

### **STEP 1: Input Validation and Sanitization**

#### **Input Security Audit:**
- [ ] **SQL Injection Prevention** - Parameterized queries, ORM usage, input validation
- [ ] **XSS Protection** - Output encoding, Content Security Policy, input sanitization
- [ ] **Command Injection** - Input validation, safe command execution patterns
- [ ] **Path Traversal** - File path validation, restricted file access
- [ ] **LDAP Injection** - Proper LDAP query construction and validation

#### **Data Validation Checks:**
- [ ] **Type validation** - Strict type checking for all inputs
- [ ] **Length validation** - Maximum input length enforcement
- [ ] **Format validation** - Regular expressions for data format checking
- [ ] **Range validation** - Numeric and date range checking
- [ ] **Whitelist validation** - Allowed values enumeration where applicable

#### **Sanitization Implementation:**
- [ ] **HTML sanitization** - Dangerous HTML element removal
- [ ] **JavaScript sanitization** - Script injection prevention
- [ ] **File upload sanitization** - File type, size, and content validation
- [ ] **Database input cleaning** - Special character handling
- [ ] **API parameter sanitization** - Request parameter validation

### **STEP 2: Authentication and Authorization Security**

#### **Authentication Mechanism Review:**
- [ ] **Password security** - Hashing algorithms (bcrypt, Argon2), complexity requirements
- [ ] **Multi-factor authentication** - TOTP, SMS, email verification implementation
- [ ] **Session management** - Secure session tokens, expiration, invalidation
- [ ] **OAuth implementation** - Proper OAuth 2.0/OpenID Connect usage
- [ ] **JWT security** - Proper signing, validation, and expiration handling

#### **Authorization Pattern Analysis:**
- [ ] **Role-based access control** - Proper RBAC implementation
- [ ] **Attribute-based access control** - ABAC pattern usage where appropriate
- [ ] **Principle of least privilege** - Minimal permission assignment
- [ ] **Privilege escalation prevention** - Vertical and horizontal privilege checks
- [ ] **Resource-level authorization** - Per-resource access control

#### **Session Security Validation:**
- [ ] **Session fixation prevention** - Session ID regeneration
- [ ] **Session hijacking protection** - Secure session tokens
- [ ] **Concurrent session handling** - Multiple session management
- [ ] **Session timeout** - Appropriate timeout values
- [ ] **Secure session storage** - HttpOnly, Secure, SameSite cookie flags

### **STEP 3: Data Protection and Privacy**

#### **Data Encryption Assessment:**
- [ ] **Data at rest encryption** - Database encryption, file system encryption
- [ ] **Data in transit encryption** - TLS/SSL implementation, certificate validation
- [ ] **End-to-end encryption** - Client-to-server encryption where required
- [ ] **Key management** - Secure key storage, rotation, and distribution
- [ ] **Encryption algorithm strength** - Modern, approved cryptographic algorithms

#### **Sensitive Data Handling:**
- [ ] **PII protection** - Personal information identification and protection
- [ ] **Payment data security** - PCI DSS compliance for payment processing
- [ ] **Medical data protection** - HIPAA compliance where applicable
- [ ] **Data classification** - Proper data categorization and handling
- [ ] **Data retention policies** - Appropriate data lifecycle management

#### **Privacy Compliance Review:**
- [ ] **GDPR compliance** - European data protection requirements
- [ ] **CCPA compliance** - California privacy law requirements
- [ ] **Data subject rights** - Access, deletion, portability implementation
- [ ] **Consent management** - Proper consent collection and tracking
- [ ] **Privacy policy accuracy** - Technical implementation matches policy

### **STEP 4: API and Network Security**

#### **API Security Validation:**
- [ ] **Rate limiting** - Request throttling and DoS prevention
- [ ] **API authentication** - Bearer tokens, API keys, mutual TLS
- [ ] **CORS configuration** - Cross-origin resource sharing security
- [ ] **API versioning security** - Secure version handling
- [ ] **Input/output validation** - API parameter and response validation

#### **Network Security Assessment:**
- [ ] **TLS configuration** - Modern TLS versions, strong cipher suites
- [ ] **Certificate validation** - Proper certificate chain validation
- [ ] **Header security** - Security headers implementation (HSTS, CSP, etc.)
- [ ] **Subdomain security** - Subdomain takeover prevention
- [ ] **DNS security** - DNS over HTTPS, DNSSEC where applicable

#### **Third-party Integration Security:**
- [ ] **Dependency vulnerabilities** - Known vulnerability scanning
- [ ] **Third-party API security** - Secure integration patterns
- [ ] **Webhook security** - Signature verification, replay protection
- [ ] **CDN security** - Content delivery network security settings
- [ ] **External service validation** - Third-party service security assessment

### **STEP 5: Infrastructure and Configuration Security**

#### **Server Security Configuration:**
- [ ] **Web server hardening** - Nginx/Apache security configuration
- [ ] **Database security** - Database server hardening and access control
- [ ] **Container security** - Docker security best practices
- [ ] **Cloud security** - AWS/Azure/GCP security configuration
- [ ] **Environment variable security** - Secure configuration management

#### **Application Security Configuration:**
- [ ] **Error handling** - Secure error messages, no information disclosure
- [ ] **Logging security** - Secure logging practices, no sensitive data logging
- [ ] **Debug mode disabled** - Production debugging disabled
- [ ] **Default credentials** - No default or weak credentials
- [ ] **Security headers** - Complete security header implementation

#### **Deployment Security:**
- [ ] **CI/CD security** - Secure deployment pipeline
- [ ] **Secret management** - Secure secret storage and rotation
- [ ] **Access control** - Deployment environment access restrictions
- [ ] **Monitoring and alerting** - Security event monitoring
- [ ] **Backup security** - Secure backup storage and encryption

## ðŸ“Š **SECURITY ASSESSMENT DELIVERABLES:**

### **REQUIRED SECURITY OUTPUTS:**

#### **1. Executive Security Summary:**
```markdown
## Security Assessment Report

**Assessment Date**: [Current Date]
**Assessment Scope**: [Components/APIs/Features reviewed]
**Overall Security Rating**: [SECURE/NEEDS ATTENTION/CRITICAL ISSUES]
**Critical Vulnerabilities**: [Number]
**High Severity Issues**: [Number]
**Medium Severity Issues**: [Number]
**Low Severity Issues**: [Number]

### Security Posture Summary:
- Authentication: [SECURE/WEAK/CRITICAL]
- Authorization: [SECURE/WEAK/CRITICAL]
- Data Protection: [SECURE/WEAK/CRITICAL]
- Input Validation: [SECURE/WEAK/CRITICAL]
- Network Security: [SECURE/WEAK/CRITICAL]
```

#### **2. Detailed Vulnerability Report:**
```markdown
## Critical Vulnerabilities (Immediate Action Required)

### 1. [Vulnerability Name] - CRITICAL
**Location**: [File/Function/API endpoint]
**Description**: [Detailed vulnerability description]
**Impact**: [Potential security impact]
**Exploit Scenario**: [How this could be exploited]
**Remediation**: [Specific fix recommendations]
**Timeline**: [Immediate/24 hours]

### 2. [Vulnerability Name] - CRITICAL
[Similar format for each critical issue]

## High Severity Issues (Fix Within 1 Week)

### 1. [Issue Name] - HIGH
**Location**: [File/Function/API endpoint]
**Description**: [Issue description]
**Security Risk**: [Risk assessment]
**Remediation**: [Fix recommendations]
**Timeline**: [1 week]

## Medium Severity Issues (Fix Within 1 Month)

### 1. [Issue Name] - MEDIUM
[Similar format for medium issues]

## Low Severity Issues (Security Improvements)

### 1. [Issue Name] - LOW
[Similar format for low issues]
```

#### **3. Security Best Practices Assessment:**
```markdown
## Security Implementation Review

### Authentication & Authorization:
- [x] Strong password hashing: [bcrypt/Argon2/PBKDF2]
- [x] Multi-factor authentication: [Implemented/Not Implemented]
- [x] Session security: [Secure/Needs Improvement]
- [x] JWT implementation: [Secure/Vulnerable]

### Data Protection:
- [x] Encryption at rest: [Implemented/Missing]
- [x] Encryption in transit: [TLS 1.3/TLS 1.2/Weak]
- [x] Key management: [Secure/Needs Improvement]
- [x] PII protection: [Compliant/Non-Compliant]

### Input Validation:
- [x] SQL injection protection: [Protected/Vulnerable]
- [x] XSS prevention: [Protected/Vulnerable]
- [x] CSRF protection: [Protected/Vulnerable]
- [x] File upload security: [Secure/Vulnerable]

### Infrastructure Security:
- [x] Security headers: [Complete/Incomplete/Missing]
- [x] HTTPS enforcement: [Enforced/Optional/Missing]
- [x] Error handling: [Secure/Information Disclosure]
- [x] Logging security: [Secure/Insecure]
```

#### **4. Compliance Assessment:**
```markdown
## Regulatory Compliance Review

### GDPR Compliance:
- Data subject rights: [Implemented/Missing]
- Consent management: [Compliant/Non-Compliant]
- Data retention: [Compliant/Non-Compliant]
- Breach notification: [Ready/Not Ready]

### Industry Standards:
- OWASP Top 10: [Compliant/Issues Found]
- NIST Framework: [Compliant/Gaps Identified]
- ISO 27001: [Aligned/Not Aligned]
- SOC 2: [Compliant/Non-Compliant]
```

#### **5. Remediation Roadmap:**
```markdown
## Security Remediation Plan

### Immediate Actions (0-24 hours):
1. [Critical fix 1] - [Estimated effort]
2. [Critical fix 2] - [Estimated effort]

### Short-term Actions (1-4 weeks):
1. [High priority fix 1] - [Estimated effort]
2. [High priority fix 2] - [Estimated effort]

### Medium-term Actions (1-3 months):
1. [Medium priority improvement 1] - [Estimated effort]
2. [Medium priority improvement 2] - [Estimated effort]

### Long-term Security Improvements (3-6 months):
1. [Security enhancement 1] - [Estimated effort]
2. [Security enhancement 2] - [Estimated effort]

### Estimated Total Effort: [Hours/Days/Weeks]
### Recommended Priority Order: [1, 2, 3, ...]
```

## ðŸš¨ **SECURITY RED FLAGS:**

**CRITICAL - Stop deployment immediately if:**
- **SQL injection vulnerabilities** found in database queries
- **Authentication bypass** possible through any mechanism
- **Sensitive data exposure** in logs, errors, or responses
- **Hard-coded credentials** or API keys in source code
- **Critical dependency vulnerabilities** with known exploits
- **Insecure direct object references** allowing unauthorized access
- **Cross-site scripting (XSS)** vulnerabilities in user inputs

**HIGH PRIORITY - Fix before next release:**
- **Weak password policies** or insecure password storage
- **Missing rate limiting** on critical endpoints
- **Insecure session management** patterns
- **Missing CSRF protection** on state-changing operations
- **Inadequate input validation** on user-controlled data
- **Information disclosure** through error messages
- **Missing security headers** (CSP, HSTS, etc.)

## ðŸ’¡ **SECURITY REVIEW EXAMPLES:**

### **Example 1: API Security Review**
```
Review the user authentication API endpoints for security vulnerabilities

Following .cursor/prompts/quality/quality-review-security.mdc:
- Focus on authentication bypass, injection attacks, and data exposure
- Validate rate limiting, input sanitization, and error handling
- Check JWT implementation and session management security
```

### **Example 2: Payment Processing Security**
```
Review the payment processing components for PCI DSS compliance

Following .cursor/prompts/quality/quality-review-security.mdc:
- Prioritize PCI DSS requirements and payment data protection
- Validate encryption, tokenization, and secure transmission
- Check for payment data logging and storage violations
```

### **Example 3: User Data Handling Security**
```
Review user profile management for GDPR compliance and data protection

Following .cursor/prompts/quality/quality-review-security.mdc:
- Focus on PII protection, consent management, and data subject rights
- Validate data encryption, retention policies, and access controls
- Check for data breach detection and notification capabilities
```

## ðŸ”§ **SECURITY TESTING TOOLS:**

### **Automated Security Scanning:**
```bash
# Dependency vulnerability scanning
npm audit                    # Node.js dependency vulnerabilities
npm audit fix               # Auto-fix known vulnerabilities

# Static application security testing (SAST)
eslint-plugin-security     # JavaScript security linting
bandit                      # Python security issues
brakeman                    # Ruby on Rails security scanner

# Dynamic application security testing (DAST)
zap-baseline.py            # OWASP ZAP baseline scan
nikto                      # Web server scanner
sqlmap                     # SQL injection testing
```

### **Manual Security Testing:**
- **Penetration testing** - Manual exploitation attempts
- **Code review** - Line-by-line security analysis
- **Architecture review** - Security design assessment
- **Threat modeling** - Systematic threat identification
- **Social engineering testing** - Human factor security assessment

---

**This security review ensures comprehensive protection against modern threats while maintaining compliance with industry standards and regulatory requirements.**
